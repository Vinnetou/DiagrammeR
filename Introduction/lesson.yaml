- Class: meta
  Course: DiagrammeR
  Lesson: Introduction
  Author: Jon Calder
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: Welcome to this swirl course on the use of the DiagrammeR package. 
    DiagrammeR allows one to create, modify, analyze, and visualize network 
    graph diagrams in R.
    
- Class: text
  Output: If you are new to swirl, note that you can leave at any point during a 
    lesson by simply hitting escape. Alternatively type info() in the R console 
    to explore the navigation options within swirl and swirl lessons.
    
- Class: text
  Output: It is highly recommended that you use RStudio for this course - since 
    RStudio provides a number of useful features and support for the DiagrammeR 
    package e.g. preview, export etc.

- Class: text
  Output: We also suggest that you maximise your R console window so that you 
    can read all the lesson and console output with a minimum amount of 
    scrolling back and forth. If you are using RStudio, it's probably best to 
    keep the script editing pane small or minimized when you are not using 
    it.

- Class: cmd_question
  Output: DiagrammeR was automatically installed (if necessary) and loaded when 
    you started this lesson. But just to build the habit, (re)load the package 
    with library(DiagrammeR).
  CorrectAnswer: library(DiagrammeR)
  AnswerTests: omnitest('library(DiagrammeR)')
  Hint: Type library(DiagrammeR) to (re)load the DiagrammeR package.
    
- Class: text
  Output: The DiagrammeR package supports two key graph description languages - 
    Graphviz and Mermaid. One could say each outshines the other in certain 
    respects, but there are definitely similarities and a fair amount of overlap 
    between them. Let's begin with a quick overview and some examples of each 
    type of diagram.
  
- Class: text
  Output: Graphviz diagrams are created using the DOT language, which is highly 
    customizable and allows you to control line colors, arrow shapes, node 
    shapes, and many other layout features. These Graphviz diagrams are created 
    in R using the `grViz()` function.
  
- Class: text
  Output: The grViz() function takes a valid graph specification in the DOT 
    language as it's main argument. The DOT graph description can either be 
    delivered to grViz() in the form of a string, a reference to a Graphviz file 
    (with a .gv file extension), or as a text connection.

- Class: text
  Output: A basic undirected, fully connected graph with 3 nodes A, B and C can 
    be created with grViz("graph {A; B; C; A--B; B--C; A--C;}").
    
- Class: cmd_question
  Output: Can you create the equivalent undirected, fully connected graph with 3 
    nodes X, Y and Z?
  CorrectAnswer: grViz("graph {X; Y; Z; X--Y; Y--Z; X--Z;}")
  AnswerTests: test_grViz_regex(grViz_XYZ)
  Hint: Just repeat the above example, replacing "A" with "X", "B" with "Y", and 
    "C" with "Z".
  
- Class: cmd_question
  Output: Another graph specification in the DOT language has been provided for 
    you in the R object (string) graphviz_example. Use grViz() to render and 
    view this example (you can use cat(graphviz_example) to inspect the DOT 
    specification of the graph if you're curious).
  CorrectAnswer: grViz(graphviz_example)
  AnswerTests: omnitest(correctExpr='grViz(graphviz_example)')
  Hint: Just type grViz(graphviz_example).
  
- Class: text
  Output: For Mermaid diagrams, DiagrammeR uses the processing function mermaid. 
    What you pass into mermaid is a valid graph or sequence diagram 
    specification. Like with grViz() the specification can be delivered to 
    mermaid in the form of a string, a reference to a Mermaid file (with a .mmd 
    file extension), or as a text connection.
    
- Class: cmd_question
  Output: A simple Mermaid graph can be created with the command
    mermaid("graph LR; A-->B; A-->C; B-->D; C-->D"). Give this a try now to see 
    what the output looks like.
  CorrectAnswer: mermaid("graph LR; A-->B; A-->C; B-->D; C-->D")
  AnswerTests: test_mermaid_regex(mermaid_ABCD)
  Hint: Simply copy the above command into the R console.
  
- Class: cmd_question
  Output: Mermaid also supports a few other diagram types e.g. sequence diagrams
    A sequence diagram has been created for you in the R object mermaid_example. 
    Use mermaid() to render and view this example (and again if you're curious 
    you can use cat(mermaid_example) to inspect the specification of the graph).
  CorrectAnswer: mermaid(mermaid_example)
  AnswerTests: omnitest(correctExpr='mermaid(mermaid_example)')
  Hint: Just type mermaid(mermaid_example).
  
- Class: text
  Output: That is really just the tip of the iceberg, but should give you a 
    basic idea of the kind of thing DiagrammeR can help you to accomplish in R. 
    It is a really flexible and powerful tool once you get familiar with the 
    syntax for Graphviz and Mermaid. In the next lesson, we'll start diving 
    into some more detail for Graphviz and the DOT language for specifying 
    graphs.
    
- Class: mult_question
  Output: Are you happy to submit the log of this lesson to the course author 
    via Google Forms? The log indicates which questions were attempted multiple 
    times, skipped or correctly answered. This information will be used to 
    identify problematic questions and make improvements. The data will be 
    automatically populated in encoded form - all you need to do is click 
    'Submit'.
  AnswerChoices: Yes (will take you to the Google Form); No, not willing to help.
  CorrectAnswer: Yes (will take you to the Google Form)
  AnswerTests: submit_log()
  Hint: Any response will be accepted.
