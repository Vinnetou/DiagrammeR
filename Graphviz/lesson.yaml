- Class: meta
  Course: DiagrammeR
  Lesson: Graphviz
  Author: Jon Calder
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: This lesson will focus on the GraphViz DOT language. As highlighted in
    the introductory lesson, DiagrammeR provides the grViz() function for 
    creating GraphViz graphs, to which a graph specification is provided as a 
    string argument (or via a file connection). 

- Class: text
  Output: The basic structure for the string provided to grViz() is 
    "[strict] (graph | digraph) [ID] { stmt_list }". Lets go through each of 
    these elements.
    
- Class: text
  Output: The graph can be either directed ("digraph") or undirected 
    ("graph"). In a directed graph each edge has an arrow at one end to 
    indicate the direction of the relationship between the nodes.

- Class: text
  Output: The [strict] and [ID] elements are both optional. Adding the "strict" 
    declaration at the beginning of the graph specification prevents duplicate 
    edges between any pair of nodes (i.e. any duplicate edges will be ignored). 
    The ID is simply a string name for the graph.

- Class: text
  Output: The statement list (wrapped in curly brackets) contains the 'meat' of 
    the graph specification, detailing the nodes, edges, and various attributes 
    of each of these.

- Class: cmd_question
  Output: To illustrate this, let's look at a simple directed graph with 3 nodes 
    Bob, Pete and Steve. The string object - 
    BobPeteSteve <- "strict digraph SimpleABC {Bob->Pete;Pete->Steve;Steve->Bob}"
    has been created for you. Pass this string as an argument to grViz() and 
    examine the resulting diagram.
  CorrectAnswer: grViz("strict digraph SimpleABC {Bob->Pete;Pete->Steve;Steve->Bob}")
  AnswerTests: omnitest(correctVal="grViz(BobPeteSteve)")
  Hint: Simply enter the command grViz(BobPeteSteve).

- Class: text
  Output: The three most commonly used statements in the Graphviz DOT language 
    are the graph statement (graph_stmt), the node statement (node_stmt), and 
    the edge statement (edge_stmt). 
    
- Class: text
  Output: Graph statements allow for attributes to be set for all components of 
    the graph. Node statements define and provide attributes for graph nodes. 
    Edge statements specify the edge operations between nodes and they supply 
    attributes to the edges. For the edge operations, a directed graph requires 
    that edges to be specified using the edge operator -> while an undirected 
    graph requires edges to be specified using the -- operator.
    
- Class: text
  Output: Between each of these statements are usually statement lists. Thus for 
    a node statement, a list of nodes is expected. For an edge statement, a list 
    of edge operations. Any of the list items can optionally have an attribute 
    list (attr_list) which modify the attributes of either the node or edge.

- Class: text
  Output: Comments may be placed within the statement list. These can be marked 
    using a // or a /* */ structure. Comment lines are denoted by a '#' 
    character. Multiple statements within a statement list can be separated by 
    linebreaks or ; characters between multiple statements.
