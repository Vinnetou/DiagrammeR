- Class: meta
  Course: DiagrammeR
  Lesson: Graphviz
  Author: Jon Calder
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: This lesson will focus on the GraphViz DOT language. As highlighted in
    the introductory lesson, DiagrammeR provides the grViz() function for 
    creating GraphViz graphs, to which a graph specification is provided as a 
    string argument (or via a file connection). 

- Class: text
  Output: The basic structure for the string provided to grViz() is 
    "[strict] (graph | digraph) [ID] { stmt_list }". Lets go through each of 
    these elements.
    
- Class: text
  Output: The graph can be either directed ("digraph") or undirected 
    ("graph"). In a directed graph each edge has an arrow at one end to 
    indicate the direction of the relationship between the nodes.

- Class: text
  Output: The [strict] and [ID] elements are both optional. Adding the "strict" 
    declaration at the beginning of the graph specification prevents duplicate 
    edges between any pair of nodes (i.e. any duplicate edges will be ignored). 
    The ID is simply a string name for the graph.

- Class: text
  Output: The statement list (wrapped in curly brackets) contains the 'meat' of 
    the graph specification, detailing the nodes, edges, and various attributes 
    of each of these.

- Class: cmd_question
  Output: To illustrate this, let's look at a simple directed graph with 3 nodes 
    Bob, Pete and Steve. The string object - 
    BobPeteSteve <- "strict digraph BobPeteSteve {Bob->Pete;Pete->Steve;Steve->Bob}"
    has been created for you. Pass this string as an argument to grViz() and 
    examine the resulting diagram.
  CorrectAnswer: grViz("strict digraph BobPeteSteve {Bob->Pete;Pete->Steve;Steve->Bob}")
  AnswerTests: omnitest(correctVal="grViz(BobPeteSteve)")
  Hint: Simply enter the command grViz(BobPeteSteve).

- Class: text
  Output: Note that the diagram has now appeared in the Viewer. Three nodes Bob, 
    Pete and Steve have been connected by three directed edges as indicated in 
    the statement list. The graph has been named BobPeteSteve (though this name 
    itself is not reflected in the diagram in any way). The strict declaration 
    was inconsequential and simply for the purpose of illustration in this case 
    since the statement list was very short and clearly no edges were duplicated.

- Class: text
  Output: The three most commonly used statements in the Graphviz DOT language 
    are the graph statement (graph_stmt), the node statement (node_stmt), and 
    the edge statement (edge_stmt). 
    
- Class: text
  Output: Graph statements allow for attributes to be set for all components of 
    the graph. Node statements define and provide attributes for graph nodes. 
    Edge statements specify the edge operations between nodes and they supply 
    attributes to the edges. For the edge operations, a directed graph requires 
    that edges to be specified using the edge operator -> while an undirected 
    graph requires edges to be specified using the -- operator.
    
- Class: text
  Output: Between each of these statements are usually statement lists. Thus for 
    a node statement, a list of nodes is expected. For an edge statement, a list 
    of edge operations. Any of the list items can optionally have an attribute 
    list (attr_list) which modify the attributes of either the node or edge.

- Class: text
  Output: Comments may be placed within the statement list. These can be marked 
    using a // or a /* */ structure. Comment lines are denoted by a '#' 
    character. Multiple statements within a statement list can be separated by 
    linebreaks or ; characters between multiple statements.

- Class: figure
  Output: Examine this figure and use it to answer the questions which follow.
  Figure: graphviz_template.R
  FigureType: new
  
- Class: mult_question
  Output: What is different about the lettered nodes and the numbered nodes?
  AnswerChoices: Different shapes (squares vs circles); Different edge types  
  CorrectAnswer: Different shapes (squares vs circles)
  AnswerTests: omnitest(correctVal = "Different shapes (squares vs circles)")
  Hint: Edges are consistent across all nodes.
  
- Class: mult_question
  Output: Which statement type in the GraphViz specification would have 
    resulted in this diffference?
  AnswerChoices: Graph statement; Node statement; Edge statement  
  CorrectAnswer: Node statement
  AnswerTests: omnitest(correctVal = "Node statement")
  Hint: Are the affected attributes global (i.e. affect the whole diagram), node 
    specific, or edge specific?
    
- Class: script
  Output: Change the provided script (which was used to generate the 
    graph diagram used previously), in order to make all nodes circles. Make 
    sure to save any changes you make to the script and then enter "submit()" at 
    the console.
  AnswerTests: test_node_shape()
  Hint: Change the node shape attribute for the lettered nodes to match the node 
    shape attribute of the numbered nodes.
  Script: node_shape.R
  
- Class: text
  Output: In addition to shape, there are a number of other node attributes 
    which are also configurable. These include the node color, fillcolor, 
    fontcolor, alpha, and many others. Node attributes are all specified by 
    name-value pairs e.g. node [fontcolor = white, fillcolor = navy]
    
- Class: script
  Output: To illustrate the aesthetic affect of node (color) attributes let's 
    look at a practical example. Update the provided script to change the 
    lettered nodes to have a limegreen color with a green border.
  AnswerTests: test_node_attributes()
  Hint: Use color = green and fillcolor = limegreen
  Script: node_attributes.R
  
- Class: text
  Output: Edge attributes can also be tweaked in a similar way to node 
    attributes, though in the case of edges there are only two configurable 
    attributes - the edge color and edge arrowhead (for directed graphs). 
  
- Class: script
  Output: Let's continue along the lines of the previous graph example and now 
    focus on changing the edge attributes. Update the provided script in such a
    way that the edges between the lettered nodes are red with a 'diamond' 
    arrowhead, the edges between the numbered nodes are blue with a 'dot' 
    arrowhead, and the edges between the lettered and numbered nodes are black 
    with a 'box' arrowhead.
  AnswerTests: test_edge_attributes()
  Hint: Update the edge attributes with color = red/blue/black and 
    arrowhead = diamond/box/dot in the correct places within the script.
  Script: edge_attributes.R
  
- Class: text
  Output: Node and edge attributes should be pretty simple once you've played 
    around with them a little, so rather than attempting to cover these fully 
    here by way of numerous exercises etc you are encouraged to experiment 
    further with these on your own until you feel comfortable. To do so you can 
    make use of the reference docs available at 
    http://rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html which 
    outline the full range of node and edge attributes, colors & shapes etc.

- Class: text
  Output: Another valuable component of the dot language is subgraphs. A 
    subgraph is simply a grouping of nodes wrapped within a set of curly 
    brackets e.g. 'subgraph subG {X Y Z}' creates a subgraph named subG. 
    Subgraphs play an important role in graph structure, influencing the layout 
    for some graph types as well as providing a context for setting attributes.

- Class: text
  Output: A subgraph can provide a context for setting attributes. In the 
    context of graph drawing, a more interesting example is
    'subgraph {rank = same; A; B; C}'
    This anonymous subgraph specifies that the nodes A, B and C should all be 
    placed on the same rank (which usually means that they will be laid out in 
    line with each other in the graph - subject to other layout constraints).

- Class: figure
  Output: Examine the layout of the graph which is being displayed in the 
    viewer. In the next question you will manipulate the rank of some nodes in 
    this graph using a subgraph in order to explore how rank can affect the 
    layout of a graph.
  Figure: graphviz_subgraph_rank.R
  FigureType: new

- Class: script
  Output: The provided script specifies the simple graph currently displayed and 
    also defines a subgraph containing the nodes a, b and c. Update this 
    subgraph to give these three nodes the same rank (as outlined previously), 
    and note the change to the layout of the graph.
  AnswerTests: test_subgraph_rank()
  Hint: Update the subgraph abc to make it's nodes share the same rank.
  Script: subgraph_rank.R

- Class: text
  Output: Subgraphs also provide a convenient shorthand for edges. An edge 
    statement allows a subgraph on both the left and right sides of the edge 
    operator. When this occurs, an edge is created from every node on the left 
    to every node on the right. For example, the specification 'A -> {B C}' is 
    equivalent to 'A -> B; A -> C'

- Class: figure
  Output: The currently displayed graph was created with a single line 
    specification which makes use of this edge shorthand - 
    grViz("digraph { {A B} -> {C D} }")
  Figure: graphviz_subgraph_edge_shorthand.R
  FigureType: new

- Class: text
  Output: A special case for subgraphs involves how the graph will be laid out 
    by certain layout types. If the name of the subgraph begins with 
    cluster, Graphviz notes the subgraph as a special cluster subgraph. This 
    then means that (if supported), the resulting layout will have the nodes 
    belonging to the cluster drawn together, with the entire cluster also 
    contained within a bounding rectangle.
  
- Class: mult_question
  Output: Are you happy to submit the log of this lesson to the course author 
    via Google Forms? The log indicates which questions were attempted multiple 
    times, skipped or correctly answered. This information will be used to 
    identify problematic questions and make improvements. The data will be 
    automatically populated in encoded form - all you need to do is click 
    'Submit'.
  AnswerChoices: Yes (will take you to the Google Form); No, not willing to help.
  CorrectAnswer: Yes (will take you to the Google Form)
  AnswerTests: submit_log()
  Hint: Any response will be accepted.
