- Class: meta
  Course: DiagrammeR
  Lesson: Node and Edge Data Frames
  Author: Jon Calder
  Type: Standard
  Organization: N/A
  Version: 2.4.2

- Class: text
  Output: In the previous lessons we looked at how to create diagrams using 
    graphViz() and mermaid() which support the original syntax and framework for 
    specifying diagrams for each of these respective libraries. We will now look 
    at the building blocks for a completely different approach, which utilizes R 
    functions to create diagrams iteratively.
  
- Class: text
  Output: This lesson will be brief but important, as we outline the workings of 
    four key functions - create_node_df(), create_edge_df(), combine_ndfs() and 
    combine_edfs(). These functions are used to create and manipulate specialized 
    data frames - node data frames (NDFs) and edge data frames (EDFs) - which can 
    then in turn be used to create graph diagrams.

- Class: text
  Output: The create_node_df() function is used to create a node data frame (NDF), 
    which is really just an R data.frame object. It contains a row for each node 
    and optional note attributes and/or additional data spread across the 
    columns. The only required argument is "n", the number of nodes to be 
    created in the NDF.
    
- Class: cmd_question
  Output: Create an NDF with 5 nodes.
  CorrectAnswer: create_node_df(5)
  AnswerTests: omnitest(correctExpr='create_node_df(5)')
  Hint: create_node_df(5)

- Class: text
  Output: As you can see, when creating a node data frame, the first column in 
    the NDF contains the (unique) node IDs, followed by a type column and then a 
    label column, which will both be NULL if not provided in the call to 
    create_node_df(). Note too that setting 'label = TRUE' will label the nodes 
    using the node IDs.
    
- Class: text
  Output: Additional node attributes can also be supplied in the function call, 
    and these will be included in the NDF. Specific column names will be 
    automatically recognised and treated as node attributes (e.g. color, 
    fillcolor, fontcolor, fontname, fontsize etc), and all other columns will be 
    ignored, which means one can include additional node data that may be useful 
    for analysis.
    
- Class: script
  Output: Update the code as instructed in the script, then save and type 
    'submit()' at the console.
  AnswerTests: test_node_attributes()
  Hint: Further node attribute columns can be created in the same way as the 
    'type' and 'label' columns. Check the list of specified node attribute 
    columns in the script comments to find the correct column names and note 
    that the attributes should be provided as either strings or numeric values.
  Script: node_attributes.R
  
- Class: text
  Output: Observe how the node data frame has now been updated to include 
    columns for these node attributes.

- Class: mult_question
  Output: Are you happy to submit the log of this lesson to the course author 
    via Google Forms? The log indicates which questions were attempted multiple 
    times, skipped or correctly answered. This information will be used to 
    identify problematic questions and make improvements. The data will be 
    automatically populated in encoded form - all you need to do is click 
    'Submit'.
  AnswerChoices: Yes (will take you to the Google Form); No, not willing to help.
  CorrectAnswer: Yes (will take you to the Google Form)
  AnswerTests: submit_log()
  Hint: Any response will be accepted.
